<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd"
>
    <!-- 使用context:component-scan之后，通常无需在声明<context:annotation-config />，因为是隐式启用<context:annotation-config /> -->
    <context:component-scan base-package="spring" />
<!--    <context:annotation-config />-->
<!--    <context:spring-configured />-->
    <!--
        使用此 handler 调度程序会将所有请求转发到默认的Servlet(例如：tomcat)，而不是使用DispatcherServlet本身来处理此类请求
        要启用该功能，您可以使用注释或基于xml的配置。
        通过自定义一个WebMvcConfigurer类型的bean，改写configureDefaultServletHandling方法：
            @Configuration
            public class MyWebConfigurer extends WebMvcConfigurerAdapter {
                @Override
                public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
                    configurer.enable();
                }
            }
    -->
    <mvc:annotation-driven validator="validator" conversion-service="conversionService" enable-matrix-variables="true">
        <!--    解决返回JSON响应数据时中文乱码的问题，因为Jackson默认使用的时ISO_8859_1，也就是默认的编码    -->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                        <property name="failOnEmptyBeans" value="false" />
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--  <aop:aspectj-autoproxy proxy-target-class="true"/>表示强制使用CGLIB代理，默认是JDK + CGLIB代理  -->
    <aop:aspectj-autoproxy />

<!--  配置了<mvc:default-servlet-handler />就无需在配置<mvc:resources ... />，反之亦然  -->
<!--    <mvc:default-servlet-handler />-->

    <!--
        ThymeleafViewResolver: 将逻辑视图名称解析为Thymeleaf模板视图
        SpringTemplateEngine：处理模板并渲染结果
        TemplateResolver：加载Thymeleaf模板
            注意：这里书中给出的是ServletContextTemplateResolver类，但会报必须给出一个实现ServletContext接口的类，所以应该使用SpringResourceTemplateResolver来替代
            ServletContextTemplateResolver和SpringResourceTemplateResolver都继承一个父类AbstractConfigurableTemplateResolver
        注意：使用thymeleaf框架时，默认返回的资源(如：html)响应头是Content-Type: text/html;charset=ISO-8895-1，此时会和HTML的字符编码UTF-8相冲突
             所以遇到中文会乱码，此时需要使用下面步骤进行对字符编码进行配置：
                1.在ThymeleafViewResolver解析器进行配置响应头的Content-type属性和解析字符编码characterEncoding属性
                2.在SpringResourceTemplateResolver加载器配置解析字符编码characterEncoding属性
    -->
<!--    <bean id="viewResolver"-->
<!--          class="org.thymeleaf.spring5.view.ThymeleafViewResolver"-->
<!--          p:templateEngine-ref="templateEngine"-->
<!--          p:contentType="text/html; charset=UTF-8"-->
<!--          p:characterEncoding="UTF-8"-->
<!--          p:order="2" />-->
<!--    <bean id="templateEngine" class="org.thymeleaf.spring5.SpringTemplateEngine" p:templateResolver-ref="templateResolver" />-->
<!--    <bean id="templateResolver"-->
<!--          class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver"-->
<!--          p:prefix="/WEB-INF/templates/"-->
<!--          p:suffix=".html"-->
<!--          p:templateMode="HTML"-->
<!--          p:characterEncoding="UTF-8" />-->

    <!--
        配置Tiles视图解析器，需要配置的Bean有TilesConfigurer、TilesViewResolver
        TilesConfigurer负责定位和加载Tile定义并协调生成Tiles，而TilesViewResolver会将逻辑视图名称解析为引用Tile定义的视图，它是通过查找与逻辑视图名称相匹配的Tile定义实现该功能的
        需要注意的是：在使用Tiles框架时，需要引入的包为tiles-extras、tiles-servlet、tiles-jsp，其中最后最重要的一点是必须在InternalResourceViewResolver之前进行配置否则Tiles不会生效
    -->
<!--    <bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">-->
<!--        <property name="definitions">-->
<!--            <list>-->
<!--                <value>/WEB-INF/layout/tiles.xml</value>-->
<!--                <value>/WEB-INF/**/tiles.xml</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

<!--    <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">-->
<!--        <property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />-->
<!--        <property name="order" value="2" />-->
<!--    </bean>-->

    <!--
        JSP使用JSTL标签来处理格式化和信息，InternalResourceViewResolver将视图解析为JstlView
        JSTL的格式化标签需要一个Locale对象，以便于恰当的格式化地狱相关的值，如日期和货币
        信息标签可以借助Spring的信息资源和Locale，从而选择适当的信息渲染到HTML之中
        通过解析JstlView，JSTL能够获得Locale对象以及Spring中配置的信息资源
        如果想让InternalResourceViewResolver将视图解析为JstlView，而不是InternalResourceView的话，只需设置它的viewClass属性即可：
            p:viewClass="org.springframework.web.servlet.view.JstlView"
        如果有多个viewResolver形成了一个view链，则每个viewResolver应该设置order属性，在最后的viewResolver应确保始终为InternalResourceViewResolver(Jsp解析器)，
            这样可以确保总是可以正常的对view进行解析(即：InternalResourceViewResolver的order属性值都要比之前所有的viewResolver的order值要大)
      -->
<!--    <bean id="resourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"-->
<!--          p:prefix="/WEB-INF/"-->
<!--          p:suffix=".jsp"-->
<!--          p:exposeContextBeansAsAttributes="true"-->
<!--          p:viewClass="org.springframework.web.servlet.view.JstlView"-->
<!--          p:order="0" />-->

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/WEB-INF/views/"
          p:suffix=".jsp"
          p:exposeContextBeansAsAttributes="true"
          p:viewClass="org.springframework.web.servlet.view.JstlView" />
    <!--  主题解析器，通过请求参数来进行切换(例如：css文件、图片等等静态资源)。Resolver: FixedThemeResolver、SessionThemeResolver、CookieThemeResolver -->
    <bean id="themeResolver" class="org.springframework.web.servlet.theme.SessionThemeResolver" />
    <!--  默认参数key为theme，可以进行更改请求参数名称  -->
    <mvc:interceptors>
        <bean id="themeChangeInterceptor" class="org.springframework.web.servlet.theme.ThemeChangeInterceptor">
            <property name="paramName" value="theme" />
        </bean>
    </mvc:interceptors>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="url" value="jdbc:mysql://localhost:3306/spittles" />
        <property name="username" value="root" />
        <property name="password" value="as123" />
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
    </bean>
    <bean class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>
<!--    <bean class="spring.repository.JdbcSpittleRepository">-->
<!--        <constructor-arg ref="jdbcTemplate" />-->
<!--    </bean>-->

    <!--  配置静态资源的目的是以确保最大限度地使用浏览器缓存并减少浏览器发出的 HTTP 请求  -->
<!--    <mvc:resources mapping="/css/**" location="/css/" />-->
    <mvc:resources mapping="/images/**" location="/images/" />
    <mvc:resources mapping="/uploads/**" location="/uploads/" />
    <mvc:resources mapping="/themes/**" location="/themes/" />

    <!--
        配置Spring国际化：
            1.必须配置id="messageSource"，否则会报错
            2.ResourceBundleMessageSource和ReloadableResourceBundleMessageSource为国际化文件加载类，它俩区别是第二个设置每隔多少秒之后会自动刷新一下文件，而无需再次重启Web
            3.ReloadableResourceBundleMessageSource的basename属性设置为在应用的外部查找(而不是像ResourceBundleMessageSource那样在类路径下查找)。
                basename属性可以设置为在类路径下(以“classpath:”作为前缀)、文件系统中(以“file:”作为前缀)或Web应用的根路径下(没有前缀)查找属性。
    -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="messages" />
        <property name="defaultEncoding" value="UTF-8" />
        <property name="fallbackToSystemLocale" value="false" />
    </bean>

    <!--
        配置文件上传有两个Spring 标准类：StandardServletMultipartResolver和CommonsMultipartResolver
        StandardServletMultipartResolver需要在Servlet3.0以上的版本，3.0版本之前需要使用CommonsMultipartResolver(Jakarta Commons FileUpload multipart解析器)
        与StandardServletMultipartResolver有所不同，CommonsMultipartResolver不会强制要求设置临时文件路径。默认情况下，这个路径就是Servlet容器的临时目录。
        StandardServletMultipartResolver必须设置location目录
    -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver" />
<!--    <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" -->
<!--          p:uploadTempDir="/tmp/spittr/uploads/" -->
<!--          p:maxUploadSize="2097152" -->
<!--          p:maxInMemorySize="0" />-->

    <!--
        使得DispatcherServlet将流程请求发送给Spring Web Flow, FlowHandlerMapping的工作仅仅是将流程请求定向到 Spring Web Flow上
        也就是说FlowHandlerMapping相当于@RequestMapping注解的作用
    -->
<!--    <bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping" p:flowRegistry-ref="flowRegistry" />-->

<!--    &lt;!&ndash;-->
<!--        响应请求的是FlowHandlerAdapter。FlowHandlerAdapter等同于Spring MVC的控制器，它会响应发送的流程请求并对其进行处理。-->
<!--        这个处理适配器是DispatcherServlet和Spring Web Flow之间的桥梁。它会处理流程请求并管理基于这些请求的流程-->
<!--        FlowHandlerAdapter相当于Controller-->
<!--    &ndash;&gt;-->
<!--    <bean class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter" p:flowExecutor-ref="flowExecutor" />-->
<!--    <flow:flow-executor id="flowExecutor" />-->
<!--    <flow:flow-registry id="flowRegistry" base-path="/WEB-INF/flows">-->
<!--        <flow:flow-location-pattern value="/**/*-flow.xml"/>-->
<!--    </flow:flow-registry>-->

<!--    <bean id="order" class="spring.flows.pizza.order.Order" abstract="true">-->
<!--        <property name="pricingEngine" ref="pricingEngine" />-->
<!--    </bean>-->

<!--    <bean id="pricingEngine" class="spring.flows.pizza.service.pricing.PricingEngineImpl" />-->
<!--    <bean id="paymentProcessor" class="spring.flows.pizza.service.payment.PaymentProcessor" />-->
<!--    <bean id="orderService" class="spring.flows.pizza.service.order.OrderServiceImpl" />-->

    <!--  内部Bean(匿名Bean)，如果给匿名Bean设置id或name这样的标识的话，Spring会忽略。  -->
    <bean id="outer" class="spring.testRef.Outer">
        <property name="target">
            <bean class="spring.testRef.Inner">
                <constructor-arg name="name" value="Fiona Apple" />
                <constructor-arg name="age" value="25" />
            </bean>
        </property>
        <property name="resource" value="classpath:resource.properties" />
    </bean>

    <!--
        为每个Bean实例化设置一个监听器，需要实现BeanPostProcessor接口(当每一个Bean实例化时，都会进行调用这个类(根据生命周期流程调用BeanPostProcessor接口上的方法))
        此处的生命周期流程是指一个Bean在实例化前和后需要做的操作，类似于Aop
    -->
    <bean class="spring.testRef.InstantiationTracingBeanPostProcessor" />

    <!--
        将 Bean 定义中的属性值外部化到单独的文件中。这样做使部署应用程序的人员能够自定义特定于环境的属性（如数据库 URL 和密码），而不会产生修改容器的主 XML 定义文件的复杂性或风险。
        PropertySourcesPlaceholderConfigurer的properties属性可以指定在properties文件缺省的属性提供默认的值
        等价于<context:property-placeholder location="classpath:strategy.properties" />
    -->
    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:strategy.properties</value>
                <value>classpath:resourceTemplate.properties</value>
            </list>
        </property>
<!--        <property name="properties">-->
<!--            <value>custom.strategy.class=com.something.DefaultStrategy</value>-->
<!--        </property>-->
    </bean>

<!--    <bean id="serviceStrategy" class="${custom.strategy.class}"/>-->

    <bean id="emailService" class="spring.testRef.event.EmailService">
        <property name="blockedList">
            <list>
                <value>known.spammer@example.org</value>
                <value>known.hacker@example.org</value>
                <value>john.doe@example.org</value>
            </list>
        </property>
    </bean>
    <bean id="blockedListNotifier" class="spring.testRef.event.BlockedListNotifier">
        <property name="notificationAddress" value="blockedlist@example.org" />
    </bean>
    <bean id="blockedListNotifierAfter" class="spring.testRef.event.BlockedListNotifierAfter" />
    <bean id="blockedListNotifierAfterAgain" class="spring.testRef.event.BlockedListNotifierAfterAgain" />
    <bean id="blockedListNotifierEntityCreatedEventTest" class="spring.testRef.event.BlockedListNotifierEntityCreatedEventTest" />


<!--    <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">-->
<!--        <property name="customEditors">-->
<!--            <map>-->
<!--                <entry key="spring.testRef.propertyEditor.ExoticType" value="spring.testRef.propertyEditor.ExoticTypeEditor" />-->
<!--            </map>-->
<!--        </property>-->
<!--    </bean>-->
<!--    &lt;!&ndash;  两者等价 ↕  &ndash;&gt;-->
    <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
        <property name="propertyEditorRegistrars">
            <list>
                <ref bean="customPropertyEditorRegistrar" />
            </list>
        </property>
    </bean>
    <bean id="customPropertyEditorRegistrar" class="spring.testRef.propertyEditor.CustomPropertyEditorRegistrar" />

<!--
    CustomPropertyEditor会把属性的字符串转换成具体的实例(也就是在Spring注入的时候会检查注册的PropertyEditor，然后根据需要进行调用setAsText方法，在方法里手动实例化所需要的实例)
-->
    <bean id="dependsOnExoticType" class="spring.testRef.propertyEditor.DependsOnExoticType">
        <property name="exoticType" value="aNameForExoticType" />
    </bean>

<!--    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">-->
<!--        <property name="formatters">-->
<!--            <set>-->
<!--                <bean class="org.springframework.format.number.NumberFormatAnnotationFormatterFactory" />-->
<!--            </set>-->
<!--        </property>-->
<!--    </bean>-->

<!--  默认的格式化是DateFormat.SHORT，如果DateFormat.SHORT不符合当前业务逻辑，可以进行全局的进行配置。确保 Spring 不会注册默认格式化程序(必须手动进行注册)  -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="registerDefaultFormatters" value="false" />
<!--    如果这里不想注册@NumberFormat注解对应的NumberFormatAnnotationFormatterFactory的话，可以不在这里进行注册    -->
        <property name="formatters">
            <set>
                <bean class="org.springframework.format.number.NumberFormatAnnotationFormatterFactory" />
            </set>
        </property>
<!--
对@DateFormat注解进行全局配置，默认是DateFormat.SHORT格式
来自JDK解释：
    DateFormat是一个用于日期/时间格式化子类的抽象类，它 以与语言无关的方式格式化和分析日期或时间。
    日期/时间格式子类，如 SimpleDateFormat，允许 格式设置（即日期→文本）、解析（文本→日期）和 正常化
        SHORT is completely numeric(SHORT是完全数字的), such as or 12.13.523:30pm
        MEDIUM is longer, such as Jan 12, 1952
        LONG is longer, such as or January 12, 19523:30:32pm
        FULL is pretty completely specified(FULL是完全指定的), such as . Tuesday, April 12, 1952 AD or 3:30:42pm PST
-->
        <property name="formatterRegistrars">
            <set>
                <bean class="org.springframework.format.datetime.standard.DateTimeFormatterRegistrar">
                    <property name="dateFormatter">
                        <bean class="org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean">
                            <property name="pattern" value="yyyy-MM-dd HH:mm:ss"/>
                        </bean>
                    </property>
                </bean>
            </set>
        </property>
    </bean>

    <bean id="testNumberFormatAnnotationFormatterFactory" class="spring.testRef.TestNumberFormatAnnotationFormatterFactory">
        <constructor-arg name="total" value="100000" />
        <constructor-arg name="money" value="50.66" />
        <property name="date" value="2018/08/02 22:50:01" />
    </bean>

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
    </bean>
    <!--  您可以通过 Bean 定义将 Bean Validation 1.1（以及作为自定义扩展，也由 Hibernate Validator 4.3）支持的方法验证功能集成到 Spring 上下文中  -->
    <!--    <bean id="validationPostProcessor" class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor" />-->

    <!--  FieldRetrievingFactoryBean用于获取类的public static字段的属性值  -->
    <bean id="prop" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField" value="spring.testRef.util.Fruit.BANANA" />
    </bean>
    <bean id="exampleUtilPerson" class="spring.testRef.util.Person">
        <!--    引用获取到其他类的属性值    -->
        <property name="fruit" ref="prop" />
    </bean>

    <!--
        PropertyPathFactoryBean用于获取bean的属性值，需要注意的是，当需要获取的属性必须有get方法。例如上面的Person类中的fruit属性，就必须有一个getFruit方法，否则会报错
        <bean id="exampleUtilPerson.fruit" class="org.springframework.beans.factory.config.PropertyPathFactoryBean" />等价于使用util命名空间方式
        使用常规配置的PropertyPathFactoryBean方式，当引用的时候也必须引用exampleUtilPerson.fruit。如下方的<property name="fruit" ref="exampleUtilPerson.fruit" />
    -->
    <util:property-path path="exampleUtilPerson.fruit" id="fruit" />
    <util:list id="emails" list-class="java.util.LinkedList">
        <value>pechorin@hero.org</value>
        <value>raskolnikov@slums.org</value>
        <value>stavrogin@gov.org</value>
        <value>porfiry@gov.org</value>
    </util:list>
    <bean id="favoriteFruit" class="spring.testRef.util.FavoriteFruit">
        <property name="fruit" ref="fruit" />
        <property name="mailboxList" ref="emails" />
    </bean>

    <!--
        设置profile的方式有三种：
            1.在springMVC的配置文件的根标签(beans)上有profile属性，用来确定当前环境使用哪个profile
            2.在springMVC的配置文件的根标签(beans)中使用嵌套的beans标签，如：
                <beans ...>
                    <beans profile="dev">这里的主体是dev(开发)环境下的配置</beans>
                    <beans profile="prod">这里的主体是prod(生产)环境下的配置</beans>
                    <beans profile="qa">这里的主体是qa(测试)环境下的配置</beans>
                    ...
                </beans>
            3.使用注解的方式，可以在类级别使用profile(推荐)：
              因为可以把开发环境所使用的配置和生产所使用的配置进行分离，最后，在创建一个即在开发或生产环境中都需要使用的配置！如果使用在方法级别上，则在视觉上会混乱
                @Configuration
                @Profile("dev")
                class Xxx {}
    -->

    <bean id="prototypeInstance" class="spring.testPrototype.TestPrototype" scope="prototype">
        <property name="name" value="马自达CX30" />
        <property name="price" value="165000.22" />
    </bean>
    <bean id="singletonBean" class="spring.testPrototype.SingletonBean">
        <lookup-method name="createTestPrototype" bean="prototypeInstance" />
    </bean>

    <!-- 推荐使用XML方式注册自定义Scope -->
    <bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <!-- 自定义Scope名字 -->
                <entry key="work">
                    <bean class="spring.customScope.CustomScope" />
                </entry>
            </map>
        </property>
    </bean>

    <!-- 使用自定义的Scope -->
    <bean id="customScopeBean" class="spring.customScope.CustomScopeBean" scope="work" />

    <!-- 抽象模板，当没有指定具体的父类时，它只是一个纯模板Bean，纯模板无法被引用(其他Bean使用ref)和实例化 -->
    <bean id="inheritedTestBeanWithoutClass" abstract="true">
        <property name="name" value="parent"/>
        <property name="age" value="1"/>
    </bean>

    <bean id="resourceDependencyInjection" class="spring.resource.ResourceDependencyInjection">
        <!-- 这里的值是一个相对路径，Spring会找到合适的上下文Resource！如果使用带有指定前缀的文件路径，则Spring根据指定前缀对应的Resource进行加载文件 -->
        <property name="xmlFileInjectResource" value="resource.txt" />
    </bean>

<!--  配置ConversionService  -->
    <bean class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="spring.converterFactory.ConverterFactoryTest" />
            </set>
        </property>
    </bean>
</beans>